package com.example.floatwindowdemo;

import java.lang.reflect.Field;

import android.content.Context;
import android.graphics.Color;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

/**
 * 
 * @author tr
 * @time 2014-2-17
 * @description 小悬浮窗对像
 */
public class FloatWindowSmallView extends LinearLayout {
	/**
	 * 记录小悬浮窗的宽度
	 */
	public static int viewWidth;

	/**
	 * 记录小悬浮窗的高度
	 */
	public static int viewHeight;
	/**
	 * 记录系统状态栏的高度
	 */
	private static int statusBarHeight;
	/**
	 * 用于更新小悬浮窗的位置
	 */
	private WindowManager windowManager;
	 /** 
     * 小悬浮窗的参数 
     */  
    private WindowManager.LayoutParams mParams;  
  
    /** 
     * 记录当前手指位置在屏幕上的横坐标值 
     */  
    private float xInScreen;  
  
    /** 
     * 记录当前手指位置在屏幕上的纵坐标值 
     */  
    private float yInScreen;  
  
    /** 
     * 记录手指按下时在屏幕上的横坐标的值 
     */  
    private float xDownInScreen;  
  
    /** 
     * 记录手指按下时在屏幕上的纵坐标的值 
     */  
    private float yDownInScreen;  
  
    /** 
     * 记录手指按下时在小悬浮窗的View上的横坐标的值 
     */  
    private float xInView;  
  
    /** 
     * 记录手指按下时在小悬浮窗的View上的纵坐标的值 
     */  
    private float yInView;  
    
    /**小悬浮窗对象*/
    private View view;

	public FloatWindowSmallView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		//获取WindowManager对象
		windowManager = (WindowManager) context
				.getSystemService(Context.WINDOW_SERVICE);
		//获取布局文件
		LayoutInflater.from(context).inflate(R.layout.floatwindowsmall, this);
		view = findViewById(R.id.smallwindowlayout);
		viewWidth = view.getLayoutParams().width;
		viewHeight = view.getLayoutParams().height;
		TextView percentView = (TextView) findViewById(R.id.percent);
		percentView.setText(MyWindowManager.getUsedPercentValue(context));

	/*	view = new ImageView(context);
		view.setImageResource(R.drawable.ic_launcher);
		viewWidth = 80;
		viewHeight = 80;

		addView(view, new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));*/

	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		
		switch (event.getAction()) {
			case MotionEvent.ACTION_DOWN:
				//手指按下时记录必要数据，纵坐标的值都需要减去状态栏的高度
				xInView = event.getX();
				yInView = event.getY();
				
				
				xDownInScreen = event.getRawX();
				yDownInScreen = event.getRawY() - getStatusBarHeight();
				
				xInScreen = event.getRawX();
				yInScreen = event.getRawY() - getStatusBarHeight();
				//点击悬浮窗，修改窗体背景颜色
				view.setBackgroundColor(Color.GREEN);
				break;
			case MotionEvent.ACTION_MOVE:
				xInScreen = event.getRawX();  
	            yInScreen = event.getRawY() - getStatusBarHeight();  
	            // 手指移动的时候更新小悬浮窗的位置  
	            updateViewPosition();  
				break;
			case MotionEvent.ACTION_UP:
				// 如果手指离开屏幕时，xDownInScreen和xInScreen相等，且yDownInScreen和yInScreen相等，则视为触发了单击事件。  
	            if (xDownInScreen == xInScreen && yDownInScreen == yInScreen) {  
	                openBigWindow();  
	            }  
				//释放悬浮窗，还原窗体背景颜色
				view.setBackgroundColor(Color.RED);
				break;

		}
		return true;
	}
	
	/**
	 * 将小悬浮窗的参数传入，用于更新小悬浮窗的位置
	 * @param params 小悬浮窗的参数
	 */
	public void setParams(WindowManager.LayoutParams params){
		mParams = params;
	}
	
	/**更新小悬浮窗在屏幕中的位置*/
	private void updateViewPosition(){
		mParams.x = (int)(xInScreen - xInView);
		mParams.y = (int)(yInScreen - yInView);
		windowManager.updateViewLayout(this, mParams);
	}
	
	/**打开大悬浮窗，同时关闭小悬浮窗*/
	private void openBigWindow(){
		MyWindowManager.createBigWindow(getContext());
		MyWindowManager.removeSmallWindow(getContext());
	}
	
	/**
	 * 用于获取状态栏的高度
	 * @return 返回状态栏高度的像素值
	 */
	private int getStatusBarHeight(){
		if(statusBarHeight == 0){
			try{
				Class<?> c = Class.forName("com.android.internal.R$dimen");
				Object o = c.newInstance();
				Field field = c.getField("status_bar_height");
				int x = (Integer) field.get(o);
				statusBarHeight = getResources().getDimensionPixelSize(x);
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		return statusBarHeight;
	}
}
